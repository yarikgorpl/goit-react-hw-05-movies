{"version":3,"file":"static/js/536.9403b317.chunk.js","mappings":"kNAAMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAUN,EANkB,SAAAC,GAAO,OACvBC,MAAM,sCAAD,OACmCD,EADnC,kCAEHL,EAHqB,E,kBC0CzB,EA9CgB,WACd,IAAQK,GAAYE,EAAAA,EAAAA,MAAZF,QAER,GAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAEND,GAAa,GAEbE,EAAUX,GACPY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAC,GAAQ,OAAIR,EAAWQ,EAASE,QAAxB,IACbC,OAAM,SAAAV,GACLC,EAASD,EAAMW,QAChB,IACAC,SAAQ,WACPT,GAAa,EACd,GAGN,GAAE,CAACT,KAGF,8BACE,0BACGM,GAASC,EAASD,EAAMW,SACxBT,IAAa,SAAC,KAAD,IAEbJ,EAAQe,KAAI,SAAAC,GACX,OACE,wBACGA,EAAGL,QAAQM,OAAS,GACnB,uBAAG,+BAEH,uBAAID,EAAGE,WAJFF,EAAGG,GAQf,QAIR,C","sources":["services/Api/Reviews.js","components/Reviews/Reviews.jsx"],"sourcesContent":["const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzN2ZjNmQ2ZDk3Y2RjYjQ2MWY4ODRlODNiYjk4YTc5OSIsInN1YiI6IjY0YTcwNjczOTY1MjIwMDBhZTg0MjcwNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ._FssleSwH7ZT_5bsWB87BjRy28BwzRkGD1qx-exsCrk',\n  },\n};\n\nconst getImages = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`,\n    options\n  );\n\nexport default getImages;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport getImages from 'services/Api/Reviews';\nimport { ColorRing } from 'react-loader-spinner';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchImages = () => {\n      setIsLoading(true);\n\n      getImages(movieId)\n        .then(response => response.json())\n        .then(response => setReviews(response.results))\n        .catch(error => {\n          setError(error.message);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    };\n    fetchImages();\n  }, [movieId]);\n\n  return (\n    <section>\n      <ul>\n        {error && setError(error.message)}\n        {isLoading && <ColorRing />}\n\n        {reviews.map(el => {\n          return (\n            <li key={el.id}>\n              {el.results.length < 1 ? (\n                <p>No reviews for this movie</p>\n              ) : (\n                <p>{el.content}</p>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Reviews;\n"],"names":["options","method","headers","accept","Authorization","movieId","fetch","useParams","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useEffect","getImages","then","response","json","results","catch","message","finally","map","el","length","content","id"],"sourceRoot":""}