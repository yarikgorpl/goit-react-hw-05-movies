{"version":3,"file":"static/js/615.b208aaf5.chunk.js","mappings":"kNAAMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAUN,EANgB,SAAAC,GAAO,OACrBC,MAAM,sCAAD,OACmCD,EADnC,2BAEHL,EAHmB,E,kBC2CvB,EA/Ca,WACX,IAAQK,GAAYE,EAAAA,EAAAA,MAAZF,QAER,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAEND,GAAa,GAEbE,EAAUX,GACPY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAC,GAAQ,OAAIR,EAAQQ,EAAST,KAArB,IACbW,OAAM,SAAAT,GACLC,EAASD,EAAMU,QAChB,IACAC,SAAQ,WACPR,GAAa,EACd,GAGN,GAAE,CAACT,KAGF,8BACE,0BACGM,GAASC,EAASD,EAAMU,SACxBR,IAAa,SAAC,KAAD,IACbJ,GACCA,EAAKc,KAAI,SAAAC,GACP,OACE,2BACE,gBACEC,IAAG,yCAAoCD,EAAGE,cAC1CC,IAAI,MAEN,uBAAIH,EAAGI,QACP,yBAAG,aAAWJ,EAAGK,eANVL,EAAGM,QASf,QAIV,C","sources":["services/Api/Casts.js","components/Cast/Cast.jsx"],"sourcesContent":["const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzN2ZjNmQ2ZDk3Y2RjYjQ2MWY4ODRlODNiYjk4YTc5OSIsInN1YiI6IjY0YTcwNjczOTY1MjIwMDBhZTg0MjcwNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ._FssleSwH7ZT_5bsWB87BjRy28BwzRkGD1qx-exsCrk',\n  },\n};\n\nconst getInfo = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n    options\n  );\n\nexport default getInfo;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport getImages from 'services/Api/Casts';\nimport { ColorRing } from 'react-loader-spinner';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchImages = () => {\n      setIsLoading(true);\n\n      getImages(movieId)\n        .then(response => response.json())\n        .then(response => setCast(response.cast))\n        .catch(error => {\n          setError(error.message);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    };\n    fetchImages();\n  }, [movieId]);\n\n  return (\n    <section>\n      <ul>\n        {error && setError(error.message)}\n        {isLoading && <ColorRing />}\n        {cast &&\n          cast.map(el => {\n            return (\n              <li key={el.cast_id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${el.profile_path}`}\n                  alt=\"\"\n                />\n                <p>{el.name}</p>\n                <p>Character:{el.character}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Cast;\n"],"names":["options","method","headers","accept","Authorization","movieId","fetch","useParams","useState","cast","setCast","error","setError","isLoading","setIsLoading","useEffect","getImages","then","response","json","catch","message","finally","map","el","src","profile_path","alt","name","character","cast_id"],"sourceRoot":""}