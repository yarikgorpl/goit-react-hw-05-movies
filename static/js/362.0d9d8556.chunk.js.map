{"version":3,"file":"static/js/362.0d9d8556.chunk.js","mappings":"0NACA,EAAwB,sBAAxB,EAAuD,uBAAvD,EAAuF,uBAAvF,EAAuH,uBAAvH,EAAqJ,qBCD/IA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NASN,EALkB,SAAAC,GAAO,OACvBC,MAAM,mDAAD,OACgDD,EADhD,8CAEHL,EAHqB,E,kBC0JzB,EA7Ee,WAAO,IAAD,EACnB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAUMX,EAAO,UAAGU,EAAaE,IAAI,kBAApB,QAAkC,GAEzCC,GAAWC,EAAAA,EAAAA,MA2BjB,OACE,iCACE,qBAASC,UAAWC,EAApB,WACE,kBACED,UAAWC,EACXC,KAAK,OACLC,YAAY,gBACZC,MAAOnB,EACPoB,SA5CkB,SAAAC,GACxB,IAAMC,EAAeD,EAAIE,OAAOJ,MAGhCR,EAAgB,CAAEX,QAASsB,IAC3BE,QAAQC,IAAIf,EACb,KAwCK,mBAAQO,KAAK,SAASF,UAAWC,EAAYU,QAnB9B,WAfnBlB,GAAa,GAEbmB,EAAU3B,GACP4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACJ3B,EAAU2B,EAAKC,QAChB,IACAC,OAAM,SAAA5B,GACLC,EAASD,EAAM6B,QAChB,IACAC,SAAQ,WACP3B,GAAa,EACd,GAUJ,EAYK,SAAoE,eAKtE,qBAASO,UAAWC,EAApB,UACGX,GAASC,EAASD,EAAM6B,SACxB3B,IAAa,SAAC,KAAD,KACd,eAAIQ,UAAWC,EAAf,SACGb,EAAOiC,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAM5B,GAAxC,SACGwB,EAAMK,SAFFL,EAAME,GAMlB,WAKV,C","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","services/Api/Search.js","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Movies_input__KrUqs\",\"button\":\"Movies_button__GcIka\",\"finder\":\"Movies_finder__UGavZ\",\"finded\":\"Movies_finded__ZDQDx\",\"list\":\"Movies_list__hqYjd\"};","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzN2ZjNmQ2ZDk3Y2RjYjQ2MWY4ODRlODNiYjk4YTc5OSIsInN1YiI6IjY0YTcwNjczOTY1MjIwMDBhZTg0MjcwNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ._FssleSwH7ZT_5bsWB87BjRy28BwzRkGD1qx-exsCrk',\n  },\n};\n\nconst getImages = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/search/movie?query=${movieId}&include_adult=false&language=en-US&page=1`,\n    options\n  );\nexport default getImages;\n","// import { useSearchParams, useLocation, Link } from 'react-router-dom';\n// import { useState, useEffect } from 'react';\n// import css from './Movies.module.css';\n// import getImages from 'services/Api/Search';\n// import { ColorRing } from 'react-loader-spinner';\n\n// const Movies = () => {\n//   const [movies, setMovies] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [searchParams, setSearchParams] = useSearchParams();\n\n//   const updateQueryString = evt => {\n//     const movieIdValue = evt.target.value;\n//     if (movieIdValue === '') {\n//       return setSearchParams({});\n//     }\n//     setSearchParams({ movieId: movieIdValue });\n//   };\n\n//   const movieId = searchParams.get('movieId') ?? '';\n\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const fetchImages = () => {\n//       setIsLoading(true);\n\n//       getImages(movieId)\n//         .then(response => response.json())\n//         .then(data => {\n//           setMovies(data.results);\n//         })\n//         .catch(error => {\n//           setError(error.message);\n//         })\n//         .finally(() => {\n//           setIsLoading(false);\n//         });\n//     };\n\n//     fetchImages();\n//   }, [movieId]);\n//   return (\n//     <div>\n//       {error && setError(error.message)}\n\n//       <input\n//         type=\"text\"\n//         value={movieId}\n//         className={css.input}\n//         onChange={updateQueryString}\n//       />\n//       <button\n//         type=\"submit\"\n//         className={css.form_button}\n//         onClick={updateQueryString}\n//       >\n//         Search\n//       </button>\n//       <section>\n//         {error && setError(error.message)}\n//         {isLoading && <ColorRing />}\n//         <ul>\n//           {movies.map(movie => {\n//             return (\n//               <li key={movie.id}>\n//                 <Link to={`${movie.id}`} state={{ from: location }}>\n//                   {movie.title}\n//                 </Link>\n//               </li>\n//             );\n//           })}\n//         </ul>\n//       </section>\n//     </div>\n//   );\n// };\n// export default Movies;\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { useState } from 'react';\nimport css from './Movies.module.css';\nimport getImages from 'services/Api/Search';\nimport { ColorRing } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const [searchValue, setSearchValue] = useState('');\n\n  const updateQueryString = evt => {\n    const movieIdValue = evt.target.value;\n    // setSearchValue(movieIdValue);\n    // console.log(movieIdValue);\n    setSearchParams({ movieId: movieIdValue });\n    console.log(searchParams);\n  };\n  const movieId = searchParams.get('movieId') ?? '';\n\n  const location = useLocation();\n\n  const fetchImages = () => {\n    setIsLoading(true);\n\n    getImages(movieId)\n      .then(response => response.json())\n      .then(data => {\n        setMovies(data.results);\n      })\n      .catch(error => {\n        setError(error.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const handleSearch = () => {\n    // if (searchValue === '') {\n    //   setSearchParams({});\n    // } else {\n    //   setSearchParams({ movieId: searchValue });\n    // }\n    fetchImages();\n  };\n\n  return (\n    <>\n      <section className={css.finder}>\n        <input\n          className={css.input}\n          type=\"text\"\n          placeholder=\"Search movies\"\n          value={movieId}\n          onChange={updateQueryString}\n        />\n        <button type=\"submit\" className={css.button} onClick={handleSearch}>\n          Search\n        </button>\n      </section>\n\n      <section className={css.finded}>\n        {error && setError(error.message)}\n        {isLoading && <ColorRing />}\n        <ul className={css.list}>\n          {movies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nexport default Movies;\nMovies.propTypes = {\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n};\n"],"names":["options","method","headers","accept","Authorization","movieId","fetch","useState","movies","setMovies","error","setError","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","get","location","useLocation","className","css","type","placeholder","value","onChange","evt","movieIdValue","target","console","log","onClick","getImages","then","response","json","data","results","catch","message","finally","map","movie","to","id","state","from","title"],"sourceRoot":""}